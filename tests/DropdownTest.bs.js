// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var $$Array = require("rescript/lib/js/array.js");
var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var $$String = require("rescript/lib/js/string.js");
var TestUtils = require("./TestUtils.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Listboxkit = require("../src/Listboxkit.bs.js");
var ReactTestingLibrary = require("rescript-react-testing-library/src/ReactTestingLibrary.bs.js");

var options = [
  "Red",
  "Green",
  "Blue"
];

function DropdownTest$DropdownListboxComponent(Props) {
  var multiSelectOpt = Props.multiSelect;
  var multiSelect = multiSelectOpt !== undefined ? multiSelectOpt : false;
  var match = Curry._3(Listboxkit.Dropdown.useDropdownListbox, options, multiSelect, undefined);
  var getOptionProps = match.getOptionProps;
  var highlightedIndex = match.highlightedIndex;
  var match$1 = Curry._1(match.getContainerProps, undefined);
  var onKeyDown = match$1.onKeyDown;
  var dropdownProps = Curry._1(match.getDropdownProps, undefined);
  var selectedOption = $$String.trim(Belt_Array.joinWith(Belt_Array.map(match.selectedIndexes, (function (index) {
                  return Belt_Array.get(options, index);
                })), ", ", (function (s) {
              return s;
            })));
  return React.createElement("div", undefined, React.createElement("button", {
                  role: dropdownProps.role,
                  tabIndex: dropdownProps.tabIndex,
                  onKeyDown: dropdownProps.onKeyDown,
                  onClick: dropdownProps.onClick
                }, selectedOption), React.createElement("ul", {
                  hidden: !match.menuVisible,
                  role: match$1.role,
                  tabIndex: match$1.tabIndex,
                  onKeyDown: onKeyDown,
                  onFocus: match$1.onFocus,
                  onBlur: match$1.onBlur
                }, $$Array.mapi((function (index, option) {
                        var match = Curry._1(getOptionProps, index);
                        var highlighted = highlightedIndex === index;
                        return React.createElement("li", {
                                    key: option,
                                    "aria-selected": match["aria-selected"],
                                    role: match.role,
                                    onKeyDown: onKeyDown,
                                    onClick: match.onClick
                                  }, highlighted ? "* " + option : option);
                      }), options)));
}

var DropdownListboxComponent = {
  options: options,
  make: DropdownTest$DropdownListboxComponent
};

function component(multiSelectOpt, param) {
  var multiSelect = multiSelectOpt !== undefined ? multiSelectOpt : false;
  return React.createElement(DropdownTest$DropdownListboxComponent, {
              multiSelect: multiSelect
            });
}

Jest.test("select option when clicked", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        TestUtils.FireEvent.click(ReactTestingLibrary.getByRole(undefined, {
                  NAME: "Str",
                  VAL: "button"
                }, component$1));
        TestUtils.assertAndContinue(TestUtils.toBeVisible(expect(ReactTestingLibrary.getByRole(undefined, {
                          NAME: "Str",
                          VAL: "listbox"
                        }, component$1))));
        TestUtils.FireEvent.click(ReactTestingLibrary.getByRole(ReactTestingLibrary.makeByRoleOptions(undefined, undefined, "Blue", undefined), {
                  NAME: "Str",
                  VAL: "option"
                }, component$1));
        var partial_arg = {
          NAME: "Str",
          VAL: "Blue"
        };
        var arg = function (param) {
          return TestUtils.toHaveTextContent(partial_arg, param);
        };
        return Curry._2(arg, undefined, expect(ReactTestingLibrary.getByRole(undefined, {
                            NAME: "Str",
                            VAL: "button"
                          }, component$1)));
      }));

Jest.test("show listbox when pressing arrow down", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        TestUtils.FireEvent.pressDown(ReactTestingLibrary.getByRole(undefined, {
                  NAME: "Str",
                  VAL: "button"
                }, component$1));
        return TestUtils.toBeVisible(expect(ReactTestingLibrary.getByRole(undefined, {
                            NAME: "Str",
                            VAL: "listbox"
                          }, component$1)));
      }));

Jest.test("show listbox when pressing arrow up", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        TestUtils.FireEvent.pressUp(ReactTestingLibrary.getByRole(undefined, {
                  NAME: "Str",
                  VAL: "button"
                }, component$1));
        return TestUtils.toBeVisible(expect(ReactTestingLibrary.getByRole(undefined, {
                            NAME: "Str",
                            VAL: "listbox"
                          }, component$1)));
      }));

Jest.test("allow multiple selection when multiSelect is true", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(true, undefined));
        var button = ReactTestingLibrary.getByRole(undefined, {
              NAME: "Str",
              VAL: "button"
            }, component$1);
        TestUtils.FireEvent.click(button);
        TestUtils.FireEvent.click(TestUtils.getOption(component$1, "Red"));
        TestUtils.FireEvent.click(button);
        TestUtils.FireEvent.click(TestUtils.getOption(component$1, "Green"));
        return TestUtils.toBeInTheDocument(expect(ReactTestingLibrary.getByRole(ReactTestingLibrary.makeByRoleOptions(undefined, undefined, "Red, Green", undefined), {
                            NAME: "Str",
                            VAL: "button"
                          }, component$1)));
      }));

var FireEvent = TestUtils.FireEvent;

var assertAndContinue = TestUtils.assertAndContinue;

var getListbox = TestUtils.getListbox;

var getButton = TestUtils.getButton;

var getOption = TestUtils.getOption;

var HaveClass = TestUtils.HaveClass;

var TextContent = TestUtils.TextContent;

var toBeDisabled = TestUtils.toBeDisabled;

var toBeEnabled = TestUtils.toBeEnabled;

var toBeEmpty = TestUtils.toBeEmpty;

var toBeEmptyDOMElement = TestUtils.toBeEmptyDOMElement;

var toBeInTheDocument = TestUtils.toBeInTheDocument;

var toBeInvalid = TestUtils.toBeInvalid;

var toBeRequired = TestUtils.toBeRequired;

var toBeValid = TestUtils.toBeValid;

var toBeVisible = TestUtils.toBeVisible;

var toContainElement = TestUtils.toContainElement;

var toContainHTML = TestUtils.toContainHTML;

var toHaveAttribute = TestUtils.toHaveAttribute;

var toHaveClass = TestUtils.toHaveClass;

var toHaveFocus = TestUtils.toHaveFocus;

var toHaveFormValues = TestUtils.toHaveFormValues;

var toHaveStyle = TestUtils.toHaveStyle;

var toHaveTextContent = TestUtils.toHaveTextContent;

var toHaveValue = TestUtils.toHaveValue;

var toHaveDisplayValue = TestUtils.toHaveDisplayValue;

var toBeChecked = TestUtils.toBeChecked;

var toBePartiallyChecked = TestUtils.toBePartiallyChecked;

var toHaveDescription = TestUtils.toHaveDescription;

exports.FireEvent = FireEvent;
exports.assertAndContinue = assertAndContinue;
exports.getListbox = getListbox;
exports.getButton = getButton;
exports.getOption = getOption;
exports.HaveClass = HaveClass;
exports.TextContent = TextContent;
exports.toBeDisabled = toBeDisabled;
exports.toBeEnabled = toBeEnabled;
exports.toBeEmpty = toBeEmpty;
exports.toBeEmptyDOMElement = toBeEmptyDOMElement;
exports.toBeInTheDocument = toBeInTheDocument;
exports.toBeInvalid = toBeInvalid;
exports.toBeRequired = toBeRequired;
exports.toBeValid = toBeValid;
exports.toBeVisible = toBeVisible;
exports.toContainElement = toContainElement;
exports.toContainHTML = toContainHTML;
exports.toHaveAttribute = toHaveAttribute;
exports.toHaveClass = toHaveClass;
exports.toHaveFocus = toHaveFocus;
exports.toHaveFormValues = toHaveFormValues;
exports.toHaveStyle = toHaveStyle;
exports.toHaveTextContent = toHaveTextContent;
exports.toHaveValue = toHaveValue;
exports.toHaveDisplayValue = toHaveDisplayValue;
exports.toBeChecked = toBeChecked;
exports.toBePartiallyChecked = toBePartiallyChecked;
exports.toHaveDescription = toHaveDescription;
exports.DropdownListboxComponent = DropdownListboxComponent;
exports.component = component;
/*  Not a pure module */
