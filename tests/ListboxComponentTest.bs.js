// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var TestUtils = require("./TestUtils.bs.js");
var ReactTestingLibrary = require("rescript-react-testing-library/src/ReactTestingLibrary.bs.js");
var Listboxkit__ListboxComponent = require("../src/Listboxkit__ListboxComponent.bs.js");

var options = [
  "Red",
  "Green",
  "Blue"
];

var activeClassName = "highlighted";

function component(onChangeOpt, multiSelectOpt, param) {
  var onChange = onChangeOpt !== undefined ? onChangeOpt : (function (param) {
        
      });
  var multiSelect = multiSelectOpt !== undefined ? multiSelectOpt : true;
  return React.createElement("div", undefined, React.createElement(Listboxkit__ListboxComponent.make, {
                  activeClassName: activeClassName,
                  multiSelect: multiSelect,
                  onChange: onChange,
                  options: options
                }), React.createElement("div", {
                  tabIndex: 0
                }, "Focus out"));
}

Jest.test("render listbox container", (function (param) {
        return TestUtils.toBeInTheDocument(expect(Curry._1(TestUtils.getListbox(undefined), ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined)))));
      }));

Jest.Only.test("calls onChange when item is selected", (function (param) {
        var calls = [];
        var onChange = function (selectedOptions) {
          calls.push(selectedOptions);
          
        };
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(onChange, undefined, undefined));
        TestUtils.FireEvent.click(TestUtils.getOption(component$1, "Red"));
        setTimeout((function (param) {
                Jest.Expect.toBe(1, Jest.Expect.expect(calls.length));
                console.log("what");
                
              }), 10);
        return TestUtils.toBeInTheDocument(expect(TestUtils.getOption(component$1, "Blue")));
      }));

Jest.test("renders the options: Red, Green and Blue", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined));
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(TestUtils.getOption(component$1, "Red"))));
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(TestUtils.getOption(component$1, "Green"))));
        return TestUtils.toBeInTheDocument(expect(TestUtils.getOption(component$1, "Blue")));
      }));

Jest.test("highlights last option when pressing END", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined));
        TestUtils.FireEvent.pressEnd(TestUtils.getOption(component$1, "Red"));
        return TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Blue")));
      }));

Jest.test("highlights first option when pressing HOME", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined));
        TestUtils.FireEvent.pressHome(TestUtils.getOption(component$1, "Blue"));
        return TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Red")));
      }));

Jest.test("sets option aria-selected to true when clicked", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined));
        TestUtils.FireEvent.click(component$1);
        TestUtils.FireEvent.click(TestUtils.getOption(component$1, "Red"));
        return TestUtils.toHaveAttribute("aria-selected", "true")(expect(TestUtils.getOption(component$1, "Red")));
      }));

Jest.test("highlights next option when pressing DOWN ", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined));
        var listbox = Curry._1(TestUtils.getListbox(undefined), component$1);
        TestUtils.FireEvent.pressDown(listbox);
        TestUtils.assertAndContinue(TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Green"))));
        TestUtils.FireEvent.pressDown(listbox);
        TestUtils.assertAndContinue(TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Blue"))));
        TestUtils.FireEvent.pressDown(listbox);
        return TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Red")));
      }));

Jest.test("highlights previous option when pressing UP ", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined));
        var listbox = Curry._1(TestUtils.getListbox(undefined), component$1);
        TestUtils.FireEvent.pressUp(listbox);
        TestUtils.assertAndContinue(TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Blue"))));
        TestUtils.FireEvent.pressUp(listbox);
        TestUtils.assertAndContinue(TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Green"))));
        TestUtils.FireEvent.pressUp(listbox);
        TestUtils.assertAndContinue(TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Red"))));
        TestUtils.FireEvent.pressUp(listbox);
        return TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Blue")));
      }));

Jest.test("selects and deselects option when pressing SPACE/ENTER", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, false, undefined));
        TestUtils.FireEvent.click(TestUtils.getOption(component$1, "Red"));
        TestUtils.assertAndContinue(TestUtils.toHaveAttribute("aria-selected", "true")(expect(TestUtils.getOption(component$1, "Red"))));
        TestUtils.FireEvent.pressEnter(Curry._1(TestUtils.getListbox(undefined), component$1));
        TestUtils.assertAndContinue(TestUtils.toHaveAttribute("aria-selected", "false")(expect(TestUtils.getOption(component$1, "Red"))));
        TestUtils.FireEvent.pressSpace(Curry._1(TestUtils.getListbox(undefined), component$1));
        return TestUtils.toHaveAttribute("aria-selected", "true")(expect(TestUtils.getOption(component$1, "Red")));
      }));

Jest.test("highlights first when focused and no option selected", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined));
        var listbox = Curry._1(TestUtils.getListbox(undefined), component$1);
        TestUtils.FireEvent.click(listbox);
        return TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Red")));
      }));

Jest.test("highlights selected index when focus and option is selected", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined));
        TestUtils.FireEvent.click(TestUtils.getOption(component$1, "Green"));
        TestUtils.assertAndContinue(TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Green"))));
        TestUtils.FireEvent.pressDown(Curry._1(TestUtils.getListbox(undefined), component$1));
        TestUtils.assertAndContinue(TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Blue"))));
        Curry._3(TestUtils.FireEvent.tab, undefined, undefined, undefined);
        TestUtils.FireEvent.click(Curry._1(TestUtils.getListbox(undefined), component$1));
        return TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Green")));
      }));

Jest.test("resets highlighted option when focus out", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined));
        var listbox = Curry._1(TestUtils.getListbox(undefined), component$1);
        TestUtils.FireEvent.pressDown(listbox);
        TestUtils.assertAndContinue(TestUtils.toBeHighlighted(expect(TestUtils.getOption(listbox, "Green"))));
        Curry._3(TestUtils.FireEvent.tab, undefined, undefined, undefined);
        TestUtils.FireEvent.focus(listbox);
        return TestUtils.toBeInTheDocument(expect(TestUtils.getOption(listbox, "Green")));
      }));

Jest.test("focus out when pressing Tab", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined, undefined));
        Curry._3(TestUtils.FireEvent.tab, undefined, undefined, undefined);
        TestUtils.assertAndContinue(TestUtils.toBeHighlighted(expect(TestUtils.getOption(component$1, "Red"))));
        Curry._3(TestUtils.FireEvent.tab, undefined, undefined, undefined);
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(TestUtils.getOption(component$1, "Red"))));
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(TestUtils.getOption(component$1, "Green"))));
        return TestUtils.toBeInTheDocument(expect(TestUtils.getOption(component$1, "Blue")));
      }));

Jest.test("selects multiple when multiSelect is true", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, true, undefined));
        Curry._3(TestUtils.FireEvent.tab, undefined, undefined, undefined);
        TestUtils.FireEvent.pressEnter(Curry._1(TestUtils.getListbox(undefined), component$1));
        TestUtils.assertAndContinue(TestUtils.toBeSelected(expect(TestUtils.getOption(component$1, "Red"))));
        TestUtils.FireEvent.pressDown(Curry._1(TestUtils.getListbox(undefined), component$1));
        TestUtils.FireEvent.pressEnter(Curry._1(TestUtils.getListbox(undefined), component$1));
        TestUtils.FireEvent.pressDown(Curry._1(TestUtils.getListbox(undefined), component$1));
        TestUtils.FireEvent.pressEnter(Curry._1(TestUtils.getListbox(undefined), component$1));
        return TestUtils.toBeSelected(expect(TestUtils.getOption(component$1, "Red")));
      }));

Jest.test("selects next when pressing arrow down and shift", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, true, undefined));
        Curry._3(TestUtils.FireEvent.tab, undefined, undefined, undefined);
        TestUtils.FireEvent.pressDownShift(Curry._1(TestUtils.getListbox(undefined), component$1));
        return TestUtils.toBeSelected(expect(TestUtils.getOption(component$1, "Green")));
      }));

Jest.test("selects previous when pressing arrow up and shift", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, true, undefined));
        Curry._3(TestUtils.FireEvent.tab, undefined, undefined, undefined);
        TestUtils.FireEvent.pressUpShift(Curry._1(TestUtils.getListbox(undefined), component$1));
        return TestUtils.toBeSelected(expect(TestUtils.getOption(component$1, "Blue")));
      }));

var FireEvent = TestUtils.FireEvent;

var getListbox = TestUtils.getListbox;

var getButton = TestUtils.getButton;

var getOption = TestUtils.getOption;

var HaveClass = TestUtils.HaveClass;

var TextContent = TestUtils.TextContent;

var toBeDisabled = TestUtils.toBeDisabled;

var toBeEnabled = TestUtils.toBeEnabled;

var toBeEmpty = TestUtils.toBeEmpty;

var toBeEmptyDOMElement = TestUtils.toBeEmptyDOMElement;

var toBeInTheDocument = TestUtils.toBeInTheDocument;

var toBeInvalid = TestUtils.toBeInvalid;

var toBeRequired = TestUtils.toBeRequired;

var toBeValid = TestUtils.toBeValid;

var toBeVisible = TestUtils.toBeVisible;

var toContainElement = TestUtils.toContainElement;

var toContainHTML = TestUtils.toContainHTML;

var toHaveAttribute = TestUtils.toHaveAttribute;

var toHaveClass = TestUtils.toHaveClass;

var toHaveFocus = TestUtils.toHaveFocus;

var toHaveFormValues = TestUtils.toHaveFormValues;

var toHaveStyle = TestUtils.toHaveStyle;

var toHaveValue = TestUtils.toHaveValue;

var toHaveDisplayValue = TestUtils.toHaveDisplayValue;

var toBeChecked = TestUtils.toBeChecked;

var toBePartiallyChecked = TestUtils.toBePartiallyChecked;

var toHaveDescription = TestUtils.toHaveDescription;

var assertAndContinue = TestUtils.assertAndContinue;

var toEqual = TestUtils.toEqual;

var toHaveTextContent = TestUtils.toHaveTextContent;

var toBeHighlighted = TestUtils.toBeHighlighted;

var toBeSelected = TestUtils.toBeSelected;

exports.FireEvent = FireEvent;
exports.getListbox = getListbox;
exports.getButton = getButton;
exports.getOption = getOption;
exports.HaveClass = HaveClass;
exports.TextContent = TextContent;
exports.toBeDisabled = toBeDisabled;
exports.toBeEnabled = toBeEnabled;
exports.toBeEmpty = toBeEmpty;
exports.toBeEmptyDOMElement = toBeEmptyDOMElement;
exports.toBeInTheDocument = toBeInTheDocument;
exports.toBeInvalid = toBeInvalid;
exports.toBeRequired = toBeRequired;
exports.toBeValid = toBeValid;
exports.toBeVisible = toBeVisible;
exports.toContainElement = toContainElement;
exports.toContainHTML = toContainHTML;
exports.toHaveAttribute = toHaveAttribute;
exports.toHaveClass = toHaveClass;
exports.toHaveFocus = toHaveFocus;
exports.toHaveFormValues = toHaveFormValues;
exports.toHaveStyle = toHaveStyle;
exports.toHaveValue = toHaveValue;
exports.toHaveDisplayValue = toHaveDisplayValue;
exports.toBeChecked = toBeChecked;
exports.toBePartiallyChecked = toBePartiallyChecked;
exports.toHaveDescription = toHaveDescription;
exports.assertAndContinue = assertAndContinue;
exports.toEqual = toEqual;
exports.toHaveTextContent = toHaveTextContent;
exports.toBeHighlighted = toBeHighlighted;
exports.toBeSelected = toBeSelected;
exports.options = options;
exports.activeClassName = activeClassName;
exports.component = component;
/*  Not a pure module */
