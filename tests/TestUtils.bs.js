// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var JestDom = require("bs-jest-dom/src/JestDom.bs.js");
var UserEvent = require("@drewschrauf/bs-user-event/src/UserEvent.bs.js");
var ReactTestingLibrary = require("rescript-react-testing-library/src/ReactTestingLibrary.bs.js");
var DomTestingLibrary__UserEvent = require("rescript-dom-testing-library/src/DomTestingLibrary__UserEvent.bs.js");

var down = "{arrowDown}";

var downShift = "{shift}{arrowDown}";

var end = "{end}";

var enter = "{enter}";

var esc = "{esc}";

var home = "{home}";

var space = "{space}";

var tab = "{tab}";

var up = "{arrowUp}";

var upShift = "{shift}{arrowUp}";

var Keyboard = {
  down: down,
  downShift: downShift,
  end: end,
  enter: enter,
  esc: esc,
  home: home,
  space: space,
  tab: tab,
  up: up,
  upShift: upShift
};

function pressDown(e) {
  return DomTestingLibrary__UserEvent.type_(undefined, e, down);
}

function pressDownShift(e) {
  return DomTestingLibrary__UserEvent.type_(undefined, e, downShift);
}

function pressEnd(e) {
  return DomTestingLibrary__UserEvent.type_(undefined, e, end);
}

function pressEnter(e) {
  return DomTestingLibrary__UserEvent.type_(undefined, e, enter);
}

function pressEsc(e) {
  return DomTestingLibrary__UserEvent.type_(undefined, e, esc);
}

function pressHome(e) {
  return DomTestingLibrary__UserEvent.type_(undefined, e, home);
}

function pressSpace(e) {
  return DomTestingLibrary__UserEvent.type_(undefined, e, space);
}

function pressTab(e) {
  return DomTestingLibrary__UserEvent.type_(undefined, e, tab);
}

function pressUp(e) {
  return DomTestingLibrary__UserEvent.type_(undefined, e, up);
}

function pressUpShift(e) {
  return DomTestingLibrary__UserEvent.type_(undefined, e, upShift);
}

function click(e) {
  return DomTestingLibrary__UserEvent.click(undefined, undefined, e);
}

function blur(param) {
  
}

function focus(param) {
  
}

var FireEvent = {
  Keyboard: Keyboard,
  pressDown: pressDown,
  pressDownShift: pressDownShift,
  pressEnd: pressEnd,
  pressEnter: pressEnter,
  pressEsc: pressEsc,
  pressHome: pressHome,
  pressSpace: pressSpace,
  pressTab: pressTab,
  pressUp: pressUp,
  pressUpShift: pressUpShift,
  click: click,
  blur: blur,
  focus: focus,
  tab: UserEvent.tab
};

function getListbox(param) {
  return Curry._2(ReactTestingLibrary.getByRole, param, {
              NAME: "Str",
              VAL: "listbox"
            });
}

function getButton(param) {
  return Curry._2(ReactTestingLibrary.getByRole, param, {
              NAME: "Str",
              VAL: "button"
            });
}

function getOption(e, name) {
  return ReactTestingLibrary.getByRole(ReactTestingLibrary.makeByRoleOptions(undefined, undefined, name, undefined), {
              NAME: "Str",
              VAL: "option"
            }, e);
}

function assertAndContinue(param) {
  
}

function toEqual(a, b) {
  return Jest.Expect.toEqual(b, a);
}

function toHaveTextContent(a, b) {
  var arg = function (param) {
    return JestDom.toHaveTextContent(b, param);
  };
  return Curry._1(arg(undefined), a);
}

var HaveClass = JestDom.HaveClass;

var TextContent = JestDom.TextContent;

var toBeDisabled = JestDom.toBeDisabled;

var toBeEnabled = JestDom.toBeEnabled;

var toBeEmpty = JestDom.toBeEmpty;

var toBeEmptyDOMElement = JestDom.toBeEmptyDOMElement;

var toBeInTheDocument = JestDom.toBeInTheDocument;

var toBeInvalid = JestDom.toBeInvalid;

var toBeRequired = JestDom.toBeRequired;

var toBeValid = JestDom.toBeValid;

var toBeVisible = JestDom.toBeVisible;

var toContainElement = JestDom.toContainElement;

var toContainHTML = JestDom.toContainHTML;

var toHaveAttribute = JestDom.toHaveAttribute;

var toHaveClass = JestDom.toHaveClass;

var toHaveFocus = JestDom.toHaveFocus;

var toHaveFormValues = JestDom.toHaveFormValues;

var toHaveStyle = JestDom.toHaveStyle;

var toHaveValue = JestDom.toHaveValue;

var toHaveDisplayValue = JestDom.toHaveDisplayValue;

var toBeChecked = JestDom.toBeChecked;

var toBePartiallyChecked = JestDom.toBePartiallyChecked;

var toHaveDescription = JestDom.toHaveDescription;

exports.FireEvent = FireEvent;
exports.getListbox = getListbox;
exports.getButton = getButton;
exports.getOption = getOption;
exports.HaveClass = HaveClass;
exports.TextContent = TextContent;
exports.toBeDisabled = toBeDisabled;
exports.toBeEnabled = toBeEnabled;
exports.toBeEmpty = toBeEmpty;
exports.toBeEmptyDOMElement = toBeEmptyDOMElement;
exports.toBeInTheDocument = toBeInTheDocument;
exports.toBeInvalid = toBeInvalid;
exports.toBeRequired = toBeRequired;
exports.toBeValid = toBeValid;
exports.toBeVisible = toBeVisible;
exports.toContainElement = toContainElement;
exports.toContainHTML = toContainHTML;
exports.toHaveAttribute = toHaveAttribute;
exports.toHaveClass = toHaveClass;
exports.toHaveFocus = toHaveFocus;
exports.toHaveFormValues = toHaveFormValues;
exports.toHaveStyle = toHaveStyle;
exports.toHaveValue = toHaveValue;
exports.toHaveDisplayValue = toHaveDisplayValue;
exports.toBeChecked = toBeChecked;
exports.toBePartiallyChecked = toBePartiallyChecked;
exports.toHaveDescription = toHaveDescription;
exports.assertAndContinue = assertAndContinue;
exports.toEqual = toEqual;
exports.toHaveTextContent = toHaveTextContent;
/* Jest Not a pure module */
